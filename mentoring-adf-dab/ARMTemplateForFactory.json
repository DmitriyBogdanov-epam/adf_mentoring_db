{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-dab"
		},
		"LS_SRC_Australia Ratings_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SRC_Australia Ratings'"
		},
		"LS_SRC_SINK_DataLakeMovies_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_SRC_SINK_DataLakeMovies'"
		},
		"LS_Git_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_Git'"
		},
		"LS_SINK_movies_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azure-mentoring-db.database.windows.net"
		},
		"LS_SINK_movies_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "movies"
		},
		"LS_SINK_movies_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "etl"
		},
		"LS_SRC_ADFKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-dab.vault.azure.net/"
		},
		"LS_SRC_BlobStorageMovies_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "MentoringBlobStorageMoviesReadSASURI"
		},
		"LS_SRC_BlobStorageOnline_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "MentoringBlobStorageOnlineReadSASURI"
		},
		"LS_SRC_LocalSQLInstance_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "EPUADNIW00B3"
		},
		"LS_SRC_LocalSQLInstance_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "CinemaTickets"
		},
		"LS_SRC_LocalSQLInstance_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		},
		"LS_SRC_SINK_DataLakeMovies_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakedb.dfs.core.windows.net/"
		},
		"LS_Sink_DataMart_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azure-mentoring-db.database.windows.net"
		},
		"LS_Sink_DataMart_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DataMart"
		},
		"LS_Sink_DataMart_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "etl"
		},
		"LS_Git_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azure-mentoring-db.database.windows.net"
		},
		"LS_Git_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "movies"
		},
		"LS_Git_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "dmitriy"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_ArchiveFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_Copy_ArchiveCSVFiles",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeTables",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataLakeArchive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GET_DEL_DeleteProcessedFiles",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ACT_GEN_Copy_ArchiveCSVFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_DataLakeTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-05T08:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeTables')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_AustraliaToFrance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_MT_Copy_Ratings",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AustraliaRatings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FRAustraliaRatings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-03T08:03:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_AustraliaRatings')]",
				"[concat(variables('factoryId'), '/datasets/DS_FRAustraliaRatings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_MetadataDriven')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_LCK_GetMetadataFromSQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT 1 / 0",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_movies_tControlMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACT_ITRC_FOR_Tables",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LCK_GetMetadataFromSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GEN_LCK_GetMetadataFromSQL').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ACT_GEN_Copy_DataLakeToSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "FilePath",
													"value": "$$FILEPATH"
												},
												{
													"name": "PipelineID",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "EXECUTE stg.SP_TruncateTables '@{item().TableName}';",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": true,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@item().DIU",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().Mapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_DataLake_MatdataDriven",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@item().Delimiter",
													"type": "Expression"
												},
												"Encoding": {
													"value": "@item().Encoding",
													"type": "Expression"
												},
												"QuoteChar": {
													"value": "@item().QuoteChar",
													"type": "Expression"
												},
												"EscapeChar": {
													"value": "@item().EscapeChar",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_MetadataDriven",
											"type": "DatasetReference",
											"parameters": {
												"TableSchema": {
													"value": "@item().TableSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ACT_GEN_SPR_LogCopy",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ACT_GEN_Copy_DataLakeToSQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[SP_WriteCopyLog]",
										"storedProcedureParameters": {
											"ActivityJson": {
												"value": {
													"value": "@string(activity('ACT_GEN_Copy_DataLakeToSQL').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityName": {
												"value": "ACT_GEN_Copy_DataLakeToSQL",
												"type": "String"
											},
											"PipelineID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineStartDateTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SINK_movies",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ACT_GEN_SPR_LogLoockup",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LCK_GetMetadataFromSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[SP_WriteLookupLog]",
							"storedProcedureParameters": {
								"ActivityJson": {
									"value": {
										"value": "@string(activity('ACT_GEN_LCK_GetMetadataFromSQL').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ActivityName": {
									"value": "ACT_GEN_LCK_GetMetadataFromSQL",
									"type": "String"
								},
								"PipelineID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartDateTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPR_LogLooskupError",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LCK_GetMetadataFromSQL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[SP_WriteErrorRuns]",
							"storedProcedureParameters": {
								"ActivityName": {
									"value": "ACT_GEN_LCK_GetMetadataFromSQL",
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@int(activity('ACT_GEN_LCK_GetMetadataFromSQL').Error.ErrorCode)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('ACT_GEN_LCK_GetMetadataFromSQL').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@activity('ACT_GEN_LCK_GetMetadataFromSQL').Error.FailureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartDateTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Report Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetHTTPURL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('GetHTTPURL').output.value",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"message\" : \"@{activity('ACT_GEN_LCK_GetMetadataFromSQL').Error.Message}\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"dmytro_bohdanov@epam.com\",\n    \"status\": \"fail\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetHTTPURL",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LCK_GetMetadataFromSQL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@pipeline().globalParameters.AFDNotifyHTTPURLSecret",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net/"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"LoockupOutput": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-15T08:48:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_movies_tControlMetadata')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLake_MatdataDriven')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_MetadataDriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_MoviesDataLakeToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_SPRC_TruncateStgTables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[SP_TruncateTables]",
							"storedProcedureParameters": {
								"tables": {
									"value": {
										"value": "credits,ratings,movies_metadata",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_Copy_Credits",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_TruncateStgTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FilePath",
										"value": "$$FILEPATH"
									},
									{
										"name": "PipelineID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "credits_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PipelineID",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FilePath",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeTables",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_stg_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_Copy_Ratings",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_TruncateStgTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FilePath",
										"value": "$$FILEPATH"
									},
									{
										"name": "PipelineID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "ratings_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PipelineID",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FilePath",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeTables",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_stg_ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_Copy_MoviesMetadata",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_TruncateStgTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FilePath",
										"value": "$$FILEPATH"
									},
									{
										"name": "PipelineID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PipelineID",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FilePath",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeTables",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_stg_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_SPRC_PopulateCast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_Copy_Credits",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_Copy_Ratings",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_Copy_MoviesMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateCompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateCast",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateCompany",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateGenre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateMovieStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateMoviesCastMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateMoviesCastMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateMoviesCompanyMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_PopulateRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_PopulateMoviesGenreMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-05T09:04:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeTables')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_stg_credits')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_stg_ratings')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_stg_movies_metadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_MoviesFromBlobStorageToDataLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_META_FileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_BlobStorageMoviesFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ACT_ITRC_FOR_FilesInBlobStorage",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ACT_GEN_META_FileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GEN_META_FileNames').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ACT_ITRC_IF_ItemIsFile",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().type, 'File') ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "ACT_MT_Copy_BlobStorageToDataLake",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "FlattenHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Info",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "LS_SRC_SINK_DataLakeMovies",
																"type": "LinkedServiceReference"
															},
															"path": "log"
														}
													},
													"dataIntegrationUnits": 4,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_BlobStorageMovies",
														"type": "DatasetReference",
														"parameters": {
															"FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_DataLakeMovies",
														"type": "DatasetReference",
														"parameters": {
															"FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-13T10:42:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_BlobStorageMoviesFolder')]",
				"[concat(variables('factoryId'), '/datasets/DS_BlobStorageMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeMovies')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_OnlineBlobStorageToDataLAke')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_Copy_Online",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LKP_GetWatermarks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@activity('ACT_GEN_LKP_GetWatermarks').output.firstRow.Watermark",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@activity('ACT_GEN_LKP_GetWatermarks').output.firstRow.NewWatermark",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 4
						},
						"inputs": [
							{
								"referenceName": "DS_BlobStorageOnlineBinary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataLakeOnline",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_LKP_GetWatermarks",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "-- CREATE TABLE etl.BlobStorageWatermarks\r\n-- (\r\n--     ID smallint NOT NULL IDENTITY(1,1) CONSTRAINT PK_etl_BlobStorageWatermarks_ID PRIMARY KEY\r\n--     ,Path varchar(200) NOT NULL\r\n--     ,Watermark datetime2(3) NOT NULL\r\n--     ,NewWatermark datetime2(3)\r\n-- );\r\n\r\nUPDATE etl.BlobStorageWatermarks\r\nSET NewWatermark = SYSUTCDATETIME()\r\nWHERE Path = '/online';\r\n\r\nSELECT\r\n        Watermark\r\n        ,NewWatermark\r\nFROM etl.BlobStorageWatermarks\r\nWHERE\r\n        Path = '/online';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_LocalSQLInstanceWatermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ACT_GEN_SPR_UpdateWatermarks",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_Copy_Online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[SP_UpdateBlobStorageWatermark]",
							"storedProcedureParameters": {
								"Path": {
									"value": "/online",
									"type": "String"
								},
								"Watremark": {
									"value": {
										"value": "@activity('ACT_GEN_LKP_GetWatermarks').output.firstRow.NewWatermark",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SRC_LocalSQLInstance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-08T14:54:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_BlobStorageOnlineBinary')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeOnline')]",
				"[concat(variables('factoryId'), '/datasets/DS_LocalSQLInstanceWatermarks')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_LocalSQLInstance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_OnlineDataLakeToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_Copy_OnlineDalaLakeToSQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "FilePath",
										"value": "$$FILEPATH"
									},
									{
										"name": "PipelineID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "EXECUTE stg.SP_TruncateTables 'online_purchase';",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['FilePath']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['PipelineID']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeOnlineJSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_SPR_PopulateOnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_Copy_OnlineDalaLakeToSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[SP_PopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPR_PopulateOnlinePurchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPR_PopulateOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[SP_PopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_Copy_OnlineToArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPR_PopulateOnlinePurchase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeOnline",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BlobStorageOnlineArchiveBinary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-08T15:52:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeOnlineJSON')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_stg_online_purchase')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeOnline')]",
				"[concat(variables('factoryId'), '/datasets/DS_BlobStorageOnlineArchiveBinary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_OnlineMaster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_DATA_OnlineToDataLake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_OnlineBlobStorageToDataLAke",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_DATA_OnlineToSQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_DATA_OnlineToDataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_OnlineDataLakeToSQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-08T17:16:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_OnlineBlobStorageToDataLAke')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_OnlineDataLakeToSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_OrchestateMovings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_DATA_CopyMoviesToDataLake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_MoviesFromBlobStorageToDataLake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_DATA_MoviesDataLakeToSQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_DATA_CopyMoviesToDataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_MoviesDataLakeToSQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_DATA_Archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_DATA_MoviesDataLakeToSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_ArchiveFiles",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-05T09:00:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_MoviesFromBlobStorageToDataLake')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_MoviesDataLakeToSQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_ArchiveFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_TicketsToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_LKP_GetWatermarks",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "UPDATE etl.Watermarks\nSET NewWatermark = (SELECT MAX(TransactionDt) FROM dbo.Tickets)\nWHERE\n        SchemaName = 'dbo'\n        AND TableName = 'Tickets';\n\nSELECT\n        SchemaName\n        ,TableName\n        ,Watermark\n        ,NewWatermark\nFROM etl.Watermarks;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_LocalSQLInstanceWatermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ACT_MT_Copy_Tickets",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LKP_GetWatermarks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "DECLARE @@NewWatermark datetime2(0) = '@{formatDateTime(activity('ACT_GEN_LKP_GetWatermarks').output.firstRow.NewWatermark, 'yyyyMMdd HH:mm:ss')}'\n        ,@@Watermark datetime2(0) = '@{formatDateTime(activity('ACT_GEN_LKP_GetWatermarks').output.firstRow.Watermark, 'yyyyMMdd HH:mm:ss')}';\n\nSELECT\n        CinemaCode\n        ,CinemaName\n        ,MovieId\n        ,TicketCount\n        ,TicketPrice\n        ,TransactionId\n        ,TransactionDt\nFROM dbo.Tickets\nWHERE\n        TransactionDt <= @@NewWatermark\n        AND TransactionDt > @@Watermark;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "EXECUTE stg.SP_TruncateTables 'cinema_tickets';",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_LocalSQLTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_stg_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_SPR_PopulateCinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_MT_Copy_Tickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[SP_PopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPR_PopulateCinemaTickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPR_PopulateCinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[SP_PopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SINK_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GET_SPR_ApplyNewWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPR_PopulateCinemaTickets",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_LKP_GetWatermarks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[SP_ApplyNewTicketsWatermarks]",
							"storedProcedureParameters": {
								"NewWatermark": {
									"value": {
										"value": "@activity('ACT_GEN_LKP_GetWatermarks').output.firstRow.NewWatermark",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SRC_LocalSQLInstance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-06T13:35:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_LocalSQLInstanceWatermarks')]",
				"[concat(variables('factoryId'), '/datasets/DS_LocalSQLTickets')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_stg_cinema_tickets')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_LocalSQLInstance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Fail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Vasted",
							"errorCode": "1111111"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-13T06:50:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Git')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Random text",
							"errorCode": "2352352"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TRAN_PopulateDims')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PopulateDims",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PopulateDims",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"tMovieStatus": {},
									"tOnlineService": {},
									"DimMovies": {},
									"DimOnlineService": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PopulateFacts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PopulateDims",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PopulateFacts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchase": {},
									"DimOnlineService": {},
									"DimMovie": {},
									"tOnlineService": {},
									"tMovies": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-11T10:44:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PopulateDims')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/dataflows/PopulateFacts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AustraliaRatings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_Australia Ratings",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ratings.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "userId",
						"type": "String"
					},
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_Australia Ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BlobStorageMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_BlobStorageMovies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_BlobStorageMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BlobStorageMoviesFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_BlobStorageMovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_BlobStorageMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BlobStorageOnlineArchiveBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BlobStorageOnlineBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_BlobStorageOnline",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_BlobStorageOnline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeArchive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/archive",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{replace(dataset().FileName, '.csv', '')}_@{formatDateTime(pipeline().TriggerTime, 'yyyyMMddHHmmss')}.csv",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeOnline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeOnlineJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeTables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLake_MatdataDriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"Delimiter": {
						"type": "string"
					},
					"Encoding": {
						"type": "string"
					},
					"QuoteChar": {
						"type": "string"
					},
					"EscapeChar": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().Encoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().EscapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().QuoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FRAustraliaRatings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_SINK_DataLakeMovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ratings.csv",
						"fileSystem": "australia-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_SINK_DataLakeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_LocalSQLInstanceWatermarks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_LocalSQLInstance",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SchemaName",
						"type": "varchar"
					},
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "Watermark",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "Watermarks"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_LocalSQLInstance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_LocalSQLTickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SRC_LocalSQLInstance",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_LocalSQLInstance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_DataMart_FactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sink_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sink_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_DataMart_dbo_DimMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sink_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sink_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_DataMart_dbo_DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sink_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sink_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_DataMart_dbo_FactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sink_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sink_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_MetadataDriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableSchema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().TableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_movies_dbo_tMovieStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovieStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_movies_dbo_tMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_movies_dbo_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_movies_dbo_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_movies_tControlMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ContainerName",
						"type": "varchar"
					},
					{
						"name": "FolderName",
						"type": "varchar"
					},
					{
						"name": "FileName",
						"type": "varchar"
					},
					{
						"name": "Delimiter",
						"type": "char"
					},
					{
						"name": "Encoding",
						"type": "varchar"
					},
					{
						"name": "ExcapeChar",
						"type": "char"
					},
					{
						"name": "QuoteChar",
						"type": "char"
					},
					{
						"name": "TableSchema",
						"type": "varchar"
					},
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "DIU",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Mapping",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_stg_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_stg_credits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "credits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_stg_movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "adult",
						"type": "nvarchar"
					},
					{
						"name": "belongs_to_collection",
						"type": "nvarchar"
					},
					{
						"name": "budget",
						"type": "nvarchar"
					},
					{
						"name": "genres",
						"type": "nvarchar"
					},
					{
						"name": "homepage",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "imdb_id",
						"type": "nvarchar"
					},
					{
						"name": "original_language",
						"type": "nvarchar"
					},
					{
						"name": "original_title",
						"type": "nvarchar"
					},
					{
						"name": "overview",
						"type": "nvarchar"
					},
					{
						"name": "popularity",
						"type": "nvarchar"
					},
					{
						"name": "poster_path",
						"type": "nvarchar"
					},
					{
						"name": "production_companies",
						"type": "nvarchar"
					},
					{
						"name": "production_countries",
						"type": "nvarchar"
					},
					{
						"name": "release_date",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "runtime",
						"type": "nvarchar"
					},
					{
						"name": "spoken_languages",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "tagline",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "video",
						"type": "nvarchar"
					},
					{
						"name": "vote_average",
						"type": "nvarchar"
					},
					{
						"name": "vote_count",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "movies_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_stg_online_purchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "online_service_name",
						"type": "nvarchar"
					},
					{
						"name": "online_service_code",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_stg_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SINK_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SINK_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SINK_movies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_SINK_movies_properties_typeProperties_server')]",
					"database": "[parameters('LS_SINK_movies_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_SINK_movies_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_SRC_ADFKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "moviesetl"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_ADFKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SRC_ADFKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_SRC_ADFKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SRC_Australia Ratings')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_SRC_Australia Ratings_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SRC_BlobStorageMovies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_SRC_ADFKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_SRC_BlobStorageMovies_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_ADFKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SRC_BlobStorageOnline')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_SRC_ADFKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_SRC_BlobStorageOnline_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_ADFKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SRC_LocalSQLInstance')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('LS_SRC_LocalSQLInstance_properties_typeProperties_server')]",
					"database": "[parameters('LS_SRC_LocalSQLInstance_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_SRC_LocalSQLInstance_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_SRC_ADFKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "LocalSQLPassword"
					}
				},
				"connectVia": {
					"referenceName": "LocalLaptop",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/LocalLaptop')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_ADFKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SRC_SINK_DataLakeMovies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_SRC_SINK_DataLakeMovies_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_SRC_SINK_DataLakeMovies_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Sink_DataMart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_Sink_DataMart_properties_typeProperties_server')]",
					"database": "[parameters('LS_Sink_DataMart_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_Sink_DataMart_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_SRC_ADFKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "moviesetl"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SRC_ADFKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TR_TestTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_DATA_TicketsToAzureSQL",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-08-06T14:43:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_TicketsToAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureEastAustraliaIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LocalLaptop')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateDims')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_movies_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_movies_dbo_tMovieStatus",
								"type": "DatasetReference"
							},
							"name": "tMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "MoviesAndStatuses"
						},
						{
							"name": "CurrentDateAdded"
						},
						{
							"name": "CurrentDateAdded2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> tMovieStatus",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> tOnlineService",
						"tMovies, tMovieStatus join(tMovies@MovieStatusId == tMovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> MoviesAndStatuses",
						"MoviesAndStatuses derive(CurrentDate = currentUTC()) ~> CurrentDateAdded",
						"tOnlineService derive(CurrentDate = currentUTC(),",
						"     partitionBy('hash', 1)) ~> CurrentDateAdded2",
						"CurrentDateAdded sink(allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = tMovieStatus@MovieStatusId,",
						"          CreatedDate = CurrentDate,",
						"          ModifiedDate = CurrentDate",
						"     )) ~> DimMovies",
						"CurrentDateAdded2 sink(allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate = CurrentDate,",
						"          ModifiedDate = CurrentDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> DimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_movies_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_movies_dbo_tMovieStatus')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_movies_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_DataMart_dbo_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_DataMart_dbo_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateFacts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_movies_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_movies_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DataMart_dbo_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "DatesAdded"
						},
						{
							"name": "JointOnlineService"
						},
						{
							"name": "JoinDimOnlineService"
						},
						{
							"name": "JointMovies"
						},
						{
							"name": "JoinDimMovie"
						},
						{
							"name": "MonthlySnapshot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> DimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"tOnlinePurchase derive(DateKey = toInteger(toString(TransactionDate, 'yyyyMMdd')),",
						"          CurrentDate = currentUTC(),",
						"          MonthKey = toInteger(toString(TransactionDate, 'yyyyMM'))) ~> DatesAdded",
						"DatesAdded, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> JointOnlineService",
						"JointOnlineService, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> JoinDimOnlineService",
						"JoinDimOnlineService, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JointMovies",
						"JointMovies, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDimMovie",
						"JoinDimOnlineService aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(Id)) ~> MonthlySnapshot",
						"JoinDimMovie sink(allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> sink1",
						"MonthlySnapshot sink(allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_movies_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_DataMart_dbo_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_DataMart_dbo_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_movies_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_movies_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_DataMart_dbo_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_DataMart_FactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Git')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_Git_properties_typeProperties_server')]",
					"database": "[parameters('LS_Git_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_Git_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_Git_password')]"
					}
				}
			},
			"dependsOn": []
		}
	]
}