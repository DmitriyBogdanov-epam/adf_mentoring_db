{
	"name": "PopulateFacts",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SQL_movies_dbo_tOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "tOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_DataMart_dbo_DimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_DataMart_dbo_DimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovie"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_movies_dbo_tOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_movies_dbo_tMovies",
						"type": "DatasetReference"
					},
					"name": "tMovies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SQL_DataMart_dbo_FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_DataMart_FactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "DatesAdded"
				},
				{
					"name": "JointOnlineService"
				},
				{
					"name": "JoinDimOnlineService"
				},
				{
					"name": "JointMovies"
				},
				{
					"name": "JoinDimMovie"
				},
				{
					"name": "MonthlySnapshot"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          ServiceId as integer,",
				"          MovieId as integer,",
				"          UserId as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string,",
				"          TransactionDate as timestamp,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlinePurchase",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionBy('hash', 1)) ~> DimOnlineService",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimMovie",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tMovies",
				"tOnlinePurchase derive(DateKey = toInteger(toString(TransactionDate, 'yyyyMMdd')),",
				"          CurrentDate = currentUTC(),",
				"          MonthKey = toInteger(toString(TransactionDate, 'yyyyMM'))) ~> DatesAdded",
				"DatesAdded, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> JointOnlineService",
				"JointOnlineService, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> JoinDimOnlineService",
				"JoinDimOnlineService, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JointMovies",
				"JointMovies, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDimMovie",
				"JoinDimOnlineService aggregate(groupBy(MonthKey,",
				"          ServiceKey),",
				"     PurchaseAmount = sum(Price),",
				"          PurchaseQuantity = count(Id)) ~> MonthlySnapshot",
				"JoinDimMovie sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          DateKey,",
				"          OnlineServiceKey = ServiceKey,",
				"          MovieKey,",
				"          Price,",
				"          TransactionId",
				"     )) ~> sink1",
				"MonthlySnapshot sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MonthKey,",
				"          OnlineServiceKey = ServiceKey,",
				"          PurchaseAmount,",
				"          PurchaseQuantity",
				"     )) ~> sink2"
			]
		}
	}
}